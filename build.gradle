plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'com.marskernel'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.8-R0.1-SNAPSHOT")
    implementation("com.h2database:h2:2.1.214")
    implementation("com.zaxxer:HikariCP:5.0.1")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Shadow configuration per includere le dipendenze nel JAR finale
shadowJar {
    archiveClassifier.set('')

    // Configurazione per Java 21
    manifest {
        attributes(
            'Multi-Release': 'true'
        )
    }

    // Relocate dependencies per evitare conflitti con altri plugin
    relocate 'com.zaxxer.hikari', 'com.marskernel.trialEconomy.libs.hikari'
    relocate 'org.h2', 'com.marskernel.trialEconomy.libs.h2'

    // Escludi file metadata che possono causare problemi
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.MF'
    exclude 'META-INF/versions/**'
}

// Usa shadowJar come build predefinito
build {
    dependsOn shadowJar
}
